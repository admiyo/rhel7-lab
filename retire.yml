
- hosts: localhost
  connection: local
  vars:
    images:
      - foo
      - bar

  tasks:

    - set_fact:
        vm_domain: demo.rdu.salab.redhat.com
        manageiq: {service: 99000000000031}

    - name: Source Vault
      include_vars: vault.yml


    - name: VM List Lookup from Service (Catalog Item Lookup)
      uri:
        url: "https://{{ cfme_hostname }}/api/services/{{ manageiq.service }}?expand=vms&attributes=vms.num_cpu"
        validate_certs: false
        method: GET
        user: "{{ cfme_username }}"
        password: "{{ cfme_password }}"
        headers:
          #X-Auth-Token: "{{ manageiq.api_token }}"
          Content-Type: "application/json"
        status_code: 200
      register: service


    - set_fact:
         vm_records: "{{ service.json.vms }}"
         ip_addresses: []
         ip_v4_addresses: []

    - name: Service VM Lookup (Catalog Item Lookup)
      uri:
        url: "{{ item.href }}?expand=vms&attributes=ipaddresses"
        validate_certs: false
        method: GET
        user: "{{ cfme_username }}"
        password: "{{ cfme_password }}"
        headers:
          #X-Auth-Token: "{{ manageiq.api_token }}"
          Content-Type: "application/json"
        status_code: 200
      with_items: "{{ vm_records }}"
      register: vm_data


    - set_fact:
        ip_addresses: "{{ ip_addresses }}  + {{ item.json.ipaddresses }}"
      with_items: "{{  vm_data.results  }}"


    - set_fact: ip_v4_pattern="(\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})"

    - set_fact:
        ip_v4_addresses: "{{ ip_v4_addresses }}  + ['{{ item }}']"
      with_items: "{{  ip_addresses   }}"
      when: item  | match ( ip_v4_pattern)

    - debug:
        msg="{{ item }}"
      with_items: "{{  ip_v4_addresses  }}"



    - name: Generate phpipam Token
      uri:
        url: "http://{{ php_ipam_hostname }}/api/{{ php_ipam_api_user }}/user/"
        method: POST
        user: "{{ php_ipam_username }}"
        password: "{{ php_ipam_password }}"
        force_basic_auth: true
        status_code: 200
      register: session

    - name: Delete IPs
      uri:
        url: "http://{{ php_ipam_hostname }}/api/demolab/addresses/{{ item }}/{{ php_ipam_subnet_id }}/"
        method: DELETE
        headers:
          phpipam-token: "{{ session.json.data.token }}"
        status_code: 200
      register: get_ip
      with_items:  "{{ ip_v4_addresses }}"

  
    - name: Generate IPA Session Cookie
      uri:
        url: "https://{{ ipa_hostname }}/ipa/session/login_password"
        validate_certs: no
        method: POST
        status_code: 200
        headers:
          Content-Type: "application/x-www-form-urlencoded"
          Accept: "text/plain"
          Referer: "https://{{ ipa_hostname }}/ipa"
        body: "user={{ ipa_username }}&password={{ ipa_password }}"
      register: session



    - name: Remove Host from IPA & Update DNS
      uri:
        url: "https://{{ ipa_hostname }}/ipa/session/json"
        validate_certs: no
        method: POST
        status_code: 200
        headers:
          Cookie: "{{ session.set_cookie }}"
          Accept: "application/json"
          Referer: "https://{{ ipa_hostname }}/ipa"
        body:
          method: host_del
          params:
          - - "{{ item }}.{{vm_domain}}"
          - updatedns: true
        body_format: json
      register: host_del
      with_items:  "{{ vm_names }}"

    - debug: var=host_del
      when: debug is defined


    - name: Remove Host from RHV
      ovirt_vms:
        auth:
          username: "{{ rhv_username }}"
          password: "{{ rhv_password }}"
          url: "https://{{ rhv_hostname }}/ovirt-engine/api"
          insecure: true
        state: absent
        name: "{{ item }}.{{vm_domain}}"
        cluster: Default
      with_items:  "{{ vm_names }}"
      register: vms

    - debug: var=vms
      when: debug is defined
